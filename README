An HTTP stubbing and mocking application.

I generally prefer having three sets of tests:
1. Unit tests, which don't depend on a deployment (e.g., don't hit a database), and run fast
2. Functional tests, which test a deployed system in as black box fashion as possible.  Importantly, though, I don't want to see my functional tests fail due to a bug in another team's code.
3. External tests, which test the relevant bits of the contract and behavior of services you depend on from other teams.

When the first two builds go red, you know it's your problem.  When the third build goes red, you have to talk to another team.

In order to keep functional tests black box, I prefer disallowing dependencies on object mocking libraries, like jMock or Rhino Mocks.  Rather than stubbing out web service calls in-process, I like to see the system under test actually make those service calls.  However, if my team isn't in control of the code for those service calls, I change the configuration so that it points to a stubbed server that my team is in control of.  httpmock is an attempt to make supporting such stubbed services easier.

httpmock requires node.js to be installed, but everything else comes for free.  Since it uses node's built-in web server, there is no more configuration.  The idea is you point your system under test to it, and you functional tests control the stubbing and mocking capabilities with a set of RESTful calls.  In practice, I hope to encapsulate those RESTful calls into prettier libraries with a set of language bindings, to make it appear more like a traditional mock framework.
